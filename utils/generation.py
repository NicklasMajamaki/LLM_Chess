import re
import ast
from exceptions import ParseException, IllegalMoveException


def extract_solution(text: str) -> str:
    """ Extracts text between <answer> and </answer> tags, trims it, and returns it. """

    matches = re.findall(r"<answer>(.*?)</answer>", text, re.DOTALL)
    if not matches:
        raise ParseException("No <answer> tags found.")
    extracted = matches[-1].strip()
    return extracted

def coerce_response(text: str, eval_type: str) -> str:
    """ Given an output generated by an LLM, coerces it to be in a more workable format. """
    try:
        processed_text = ast.literal_eval(text)
    except:
        processed_text = text

    if eval_type == 'choose_from_n' or eval_type == 'predict_singlemove':
        # Need output to be a single string (no list)
        if isinstance(processed_text, str):
            pass
        if isinstance(processed_text, list):
            if len(processed_text) == 1:
                processed_text = processed_text[0]
            elif len(processed_text) > 1:
                raise ParseException("Output is a list with multiple elements.")
        else:
            raise ParseException("Output is not in the correct format.") 

    elif eval_type == 'produce_list':
        # Need to coerce to a list of strings
        if isinstance(processed_text, list):
            # Process each element to ensure all elements are strings
            processed_text = [str(x) for x in processed_text]
        else:
            raise ParseException("Output is not a list.")

    else:
        raise ValueError(f"Unknown eval type: {eval_type}")

    return processed_text